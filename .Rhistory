main = "main", xlab = "xlab", ylab = "ylab")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_a[1, age - 16],
x1 = age,
y1 = pred_intervals_a[2, age - 16],
lwd = 2)
}
#calculating the 90% quantiles
quant90_educ <- quantile(lalonde_control$educ, probs = 0.9)
quant90_re74 <- quantile(lalonde_control$re74, probs = 0.9)
quant90_re75 <- quantile(lalonde_control$re75, probs = 0.9)
#creating the predictor maxtrix for scenario b
matrix_b <- as.data.frame(cbind(ages, rep(quant90_educ,39), rep(quant90_re74,39), rep(quant90_re75,39)))
names(matrix_b) = c('age','educ','re74','re75')
matrix_b['educ*re74'] <- matrix_b$educ*matrix_b$re74
matrix_b['educ*re75'] <- matrix_b$educ*matrix_b$re75
matrix_b['age*re74'] <- matrix_b$age*matrix_b$re74
matrix_b['age*re75'] <- matrix_b$age*matrix_b$re75
matrix_b['re74*re75'] <- matrix_b$re74*matrix_b$re75
#95% prediction intervals for scenario b
set.seed(1)
pred_intervals_b <- Predict_Intervals(matrix_b, sim_params_re78, 10000)
#plotting the intervals
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.5*min(pred_intervals_b[1,]),1.5*max(pred_intervals_b[2,])),
main = "b", xlab = "xlab", ylab = "ylab")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_b[1, age - 16],
x1 = age,
y1 = pred_intervals_b[2, age - 16],
lwd = 2)
}
#95% prediction intervals for scenario a
pred_intervals_a <- Predict_Intervals(matrix_a, sim_params_re78, 10000)
#creating the predictor matrix for scenario a
matrix_a <- as.data.frame(cbind(rep(1,39),ages, rep(med_educ,39), rep(med_re74,39), rep(med_re75,39)))
names(matrix_a) = c('intercept','age','educ','re74','re75')
matrix_a['educ*re74'] <- matrix_a$educ*matrix_a$re74
matrix_a['educ*re75'] <- matrix_a$educ*matrix_a$re75
matrix_a['age*re74'] <- matrix_a$age*matrix_a$re74
matrix_a['age*re75'] <- matrix_a$age*matrix_a$re75
matrix_a['re74*re75'] <- matrix_a$re74*matrix_a$re75
#95% prediction intervals for scenario a
pred_intervals_a <- Predict_Intervals(matrix_a, sim_params_re78, 10000)
#function for predicting intervals given the predictor matrix, simulated paramaters, and desired n.sims
Predict_Intervals <- function(xmatrix,sim_params,num_sims) {
sim_ys <- data.frame()
for (j in 1:length(xmatrix[,1])) {
for (i in 1:num_sims) {
sim_ys[i,j] <- sum(xmatrix[j,]*sim_params@coef[i,]) + rnorm(1, 0, sim_params@sigma[i])
}
}
return (apply(sim_ys,2,quantile,probs = c(0.025, 0.975)))
}
#age domain
ages <- c(min(lalonde_control$age):max(lalonde_control$age))
length(ages)
#calculating the medians
med_educ <- median(lalonde_control$educ)
med_re74 <- median(lalonde_control$re74)
med_re75 <- median(lalonde_control$re75)
#creating the predictor matrix for scenario a
matrix_a <- as.data.frame(cbind(rep(1,39),ages, rep(med_educ,39), rep(med_re74,39), rep(med_re75,39)))
names(matrix_a) = c('intercept','age','educ','re74','re75')
matrix_a['educ*re74'] <- matrix_a$educ*matrix_a$re74
matrix_a['educ*re75'] <- matrix_a$educ*matrix_a$re75
matrix_a['age*re74'] <- matrix_a$age*matrix_a$re74
matrix_a['age*re75'] <- matrix_a$age*matrix_a$re75
matrix_a['re74*re75'] <- matrix_a$re74*matrix_a$re75
#95% prediction intervals for scenario a
pred_intervals_a <- Predict_Intervals(matrix_a, sim_params_re78, 10000)
#creating the predictor matrix for scenario a
matrix_a <- as.data.frame(ages, rep(med_educ,39), rep(med_re74,39), rep(med_re75,39)))
names(matrix_a) = c('age','educ','re74','re75')
matrix_a['educ*re74'] <- matrix_a$educ*matrix_a$re74
matrix_a['educ*re75'] <- matrix_a$educ*matrix_a$re75
#creating the predictor matrix for scenario a
matrix_a <- as.data.frame(cbind(ages, rep(med_educ,39), rep(med_re74,39), rep(med_re75,39)))
names(matrix_a) = c('age','educ','re74','re75')
matrix_a['educ*re74'] <- matrix_a$educ*matrix_a$re74
matrix_a['educ*re75'] <- matrix_a$educ*matrix_a$re75
matrix_a['age*re74'] <- matrix_a$age*matrix_a$re74
matrix_a['age*re75'] <- matrix_a$age*matrix_a$re75
matrix_a['re74*re75'] <- matrix_a$re74*matrix_a$re75
#95% prediction intervals for scenario a
pred_intervals_a <- Predict_Intervals(matrix_a, sim_params_re78, 10000)
View(pred_intervals_a)
knitr::opts_chunk$set(echo = TRUE)
#plotting the intervals
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.25*min(pred_intervals_a[1,]),1.25*max(pred_intervals_a[2,])),
main = "", xlab = "age", ylab = "re78")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_a[1, age - 16],
x1 = age,
y1 = pred_intervals_a[2, age - 16],
lwd = 2)
}
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.25*min(pred_intervals_b[1,]),1.25*max(pred_intervals_b[2,])),
main = "", xlab = "age", ylab = "re78")
#calculating the 90% quantiles
quant90_educ <- quantile(lalonde_control$educ, probs = 0.9)
quant90_re74 <- quantile(lalonde_control$re74, probs = 0.9)
quant90_re75 <- quantile(lalonde_control$re75, probs = 0.9)
#creating the predictor maxtrix for scenario b
matrix_b <- as.data.frame(cbind(ages, rep(quant90_educ,39), rep(quant90_re74,39), rep(quant90_re75,39)))
names(matrix_b) = c('age','educ','re74','re75')
matrix_b['educ*re74'] <- matrix_b$educ*matrix_b$re74
matrix_b['educ*re75'] <- matrix_b$educ*matrix_b$re75
matrix_b['age*re74'] <- matrix_b$age*matrix_b$re74
matrix_b['age*re75'] <- matrix_b$age*matrix_b$re75
matrix_b['re74*re75'] <- matrix_b$re74*matrix_b$re75
#95% prediction intervals for scenario b
set.seed(1)
pred_intervals_b <- Predict_Intervals(matrix_b, sim_params_re78, 10000)
View(pred_intervals_b)
#plotting the intervals
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.5*min(pred_intervals_b[1,]),1.5*max(pred_intervals_b[2,])),
main = "b", xlab = "xlab", ylab = "ylab")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_b[1, age - 16],
x1 = age,
y1 = pred_intervals_b[2, age - 16],
lwd = 2)
}
#repeat process with new values and data frame.
for(j in ages){
unit = c(1, j, quant90_educ, quant90_re74, quant90_re75, j*quant90_re74, j*quant90_re75, quant90_educ*quant90_re74, quant90_educ*quant90_re75, quant90_re74*quant90_re75)
for(i in 1:10000){
stored2[i, j - 16] <-
sum(unit * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
set.seed(1)
stored2 = data.frame()
#repeat process with new values and data frame.
for(j in ages){
unit = c(1, j, quant90_educ, quant90_re74, quant90_re75, j*quant90_re74, j*quant90_re75, quant90_educ*quant90_re74, quant90_educ*quant90_re75, quant90_re74*quant90_re75)
for(i in 1:10000){
stored2[i, j - 16] <-
sum(unit * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
confints2 = apply(stored2, 2, quantile, probs = c(0.025, 0.975))
View(confints2)
length(xmatrix[,1])
length(matrix_b[,1])
#creating the predictor maxtrix for scenario b
matrix_b <- as.data.frame(cbind(rep(1,39),ages, rep(quant90_educ,39), rep(quant90_re74,39), rep(quant90_re75,39)))
names(matrix_b) = c('intercept','age','educ','re74','re75')
matrix_b['educ*re74'] <- matrix_b$educ*matrix_b$re74
matrix_b['educ*re75'] <- matrix_b$educ*matrix_b$re75
matrix_b['age*re74'] <- matrix_b$age*matrix_b$re74
matrix_b['age*re75'] <- matrix_b$age*matrix_b$re75
matrix_b['re74*re75'] <- matrix_b$re74*matrix_b$re75
Predict_Intervals <- function(xmatrix,sim_params,num_sims) {
sim_ys <- data.frame()
for (j in 1:length(xmatrix[,1])) {
for (i in 1:num_sims) {
sim_ys[i,j] <-
sum(xmatrix[j,]*sim_params@coef[i,]) + rnorm(1, 0, sim_params@sigma[i])
}
}
return (apply(sim_ys,2,quantile,probs = c(0.025, 0.975)))
}
#95% prediction intervals for scenario b
set.seed(1)
pred_intervals_b <- Predict_Intervals(matrix_b, sim_params_re78, 10000)
View(pred_intervals_b)
View(confints2)
stored2 = data.frame()
#repeat process with new values and data frame.
for(j in ages){
for(i in 1:10000){
stored2[i, j - 16] <-
sum(matrix_b[j-16,] * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
View(confints2)
View(matrix_b)
View(confints2)
View(pred_intervals_b)
Predict_Intervals <- function(xmatrix,sim_params,num_sims) {
sim_ys <- data.frame()
for (j in 1:length(xmatrix[,1])) {
for (i in 1:num_sims) {
sim_ys[i,j] <-
sum(xmatrix[j,]*sim_params@coef[i,]) + rnorm(1, 0, sim_params@sigma[i])
}
}
return (sim_ys)
}
#95% prediction intervals for scenario b
set.seed(1)
stored1 <- Predict_Intervals(matrix_b,sim_params_re78,1000)
pred_intervals_b <-apply(stored1,2,quantile,probs = c(0.025, 0.975))
set.seed(1)
stored2 = data.frame()
#repeat process with new values and data frame.
for(j in ages){
for(i in 1:1000){
stored2[i, j - 16] <-
sum(matrix_b[j-16,] * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
confints2 = apply(stored2, 2, quantile, probs = c(0.025, 0.975))
View(confints2)
View(pred_intervals_b)
View(stored1)
View(stored2)
Predict_Intervals <- function(xmatrix,sim_params,num_sims) {
sim_ys <- data.frame()
for (j in 1:length(xmatrix[,1])) {
for (i in 1:num_sims) {
sim_ys[i,j] <-
sum(xmatrix[j,]*sim_params@coef[i,]) + rnorm(1, 0, sim_params@sigma[i])
}
}
return (apply(sim_ys,2,quantile,probs = c(0.025, 0.975)))
}
#95% prediction intervals for scenario b
set.seed(1)
#stored1 <- Predict_Intervals(matrix_b,sim_params_re78,1000)
#pred_intervals_b <-apply(stored1,2,quantile,probs = c(0.025, 0.975))
pred_intervals_b <- Predict_Intervals(matrix_b,sim_params_re78,1000)
set.seed(1)
stored2 = data.frame()
#repeat process with new values and data frame.
for(j in ages){
for(i in 1:1000){
stored2[i, j - 16] <-
sum(matrix_b[j-16,] * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
confints2 = apply(stored2, 2, quantile, probs = c(0.025, 0.975))
View(confints2)
View(pred_intervals_b)
#95% prediction intervals for scenario b
set.seed(1)
pred_intervals_b <- Predict_Intervals(matrix_b,sim_params_re78,10000)
set.seed(1)
stored2 = data.frame()
#repeat process with new values and data frame.
for(j in ages){
for(i in 1:10000){
stored2[i, j - 16] <-
sum(matrix_b[j-16,] * sim_params_re78@coef[i,] )+ rnorm(1, 0, sim_params_re78@sigma[i])
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(arm)
library(Matching)
data("lalonde")
lalonde_control <- lalonde[which(lalonde$treat == 0),]
#linear model
predict_re78_control <- lm(re78 ~ age + educ + re74 + re75 + educ*re74 +
educ*re75 + age*re74 + age*re75 + re74*re75, data = lalonde_control)
#simulating the parameters
sim_params_re78 <- sim(predict_re78_control, n.sims=10000)
#age domain
ages <- c(min(lalonde_control$age):max(lalonde_control$age))
length(ages)
#calculating the medians
med_educ <- median(lalonde_control$educ)
med_re74 <- median(lalonde_control$re74)
med_re75 <- median(lalonde_control$re75)
set.seed(1)
#simulating the predicted values
sim_ys_a <- data.frame()
for (j in 1:39) {
xs_a <- c(1,ages[j],med_educ, med_re74, med_re75, med_educ*med_re74,
med_educ*med_re75, ages[j]*med_re74, ages[j]*med_re75, med_re74*med_re75)
for (i in 1:10000) {
betas_a <- sim_params_re78@coef[i,]
sim_ys_a[i,j] <- sum(xs_a*betas_a) + rnorm(1, 0, sim_params_re78@sigma[i])
}
}
pred_intervals_a <- apply(sim_ys_a,2,quantile,probs = c(0.025, 0.975))
pred_intervals_a
#plotting the intervals
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.25*min(pred_intervals_a[1,]),1.25*max(pred_intervals_a[2,])),
main = "", xlab = "age", ylab = "re78")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_a[1, age - 16],
x1 = age,
y1 = pred_intervals_a[2, age - 16],
lwd = 2)
}
```
#calculating the 90% quantiles
quant90_educ <- quantile(lalonde_control$educ, probs = 0.9)
quant90_re74 <- quantile(lalonde_control$re74, probs = 0.9)
quant90_re75 <- quantile(lalonde_control$re75, probs = 0.9)
set.seed(1)
#simulating the predicted values
sim_ys_b <- data.frame()
for (j in 1:39) {
xs_b <- c(1,ages[j],quant90_educ, quant90_re74, quant90_re75, quant90_educ*quant90_re74,
quant90_educ*quant90_re75, ages[j]*quant90_re74, ages[j]*quant90_re75, quant90_re74*quant90_re75)
for (i in 1:10000) {
betas_b <- sim_params_re78@coef[i,]
sim_ys_b[i,j] <- sum(xs_b*betas_b) + rnorm(1, 0, sim_params_re78@sigma[i])
}
}
pred_intervals_b <- apply(sim_ys_b, 2, quantile, probs = c(0.025, 0.975))
pred_intervals_b
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.25*min(pred_intervals_b[1,]),1.25*max(pred_intervals_b[2,])),
main = "", xlab = "age", ylab = "re78")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_b[1, age - 16],
x1 = age,
y1 = pred_intervals_b[2, age - 16],
lwd = 2)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(1)
#simulating the predicted values
sim_ys_b <- data.frame()
for (j in 1:39) {
xs_b <- c(1,ages[j],quant90_educ, quant90_re74, quant90_re75, ages[j]*quant90_re74, ages[j]*quant90_re75, quant90_educ*quant90_re74,
quant90_educ*quant90_re75,  quant90_re74*quant90_re75)
for (i in 1:10000) {
betas_b <- sim_params_re78@coef[i,]
sim_ys_b[i,j] <- sum(xs_b*betas_b) + rnorm(1, 0, sim_params_re78@sigma[i])
}
}
pred_intervals_b <- apply(sim_ys_b, 2, quantile, probs = c(0.025, 0.975))
pred_intervals_b
plot(x = c(1:100), y = c(1:100), type = "n", xlim = c(17,55), ylim = c(1.25*min(pred_intervals_b[1,]),1.25*max(pred_intervals_b[2,])),
main = "", xlab = "age", ylab = "re78")
for (age in 17:55) {
segments(
x0 = age,
y0 = pred_intervals_b[1, age - 16],
x1 = age,
y1 = pred_intervals_b[2, age - 16],
lwd = 2)
}
library(foreign)
library(foreign)
read.dta('/Users/juan/Downloads/nsw.dta')
nsw <- read.dta('/Users/juan/Downloads/nsw.dta')
summary(nsw)
head(nsw)
hist(nsw$age)
hist(nsw$education)
summary(nsw$black)
table(nsw$black)
plot(black,educ)
plot(nsw$black,nsw$education)
line(pred_educ_black)
pred_educ_black <- lm(education ~ black, data = nsw)
line(pred_educ_black)
?predict
line(predict(pred_educ_black))
lines(predict(pred_educ_black))
lines(predict(pred_educ_black))
predict(pred_educ_black)
lines(black,predict(pred_educ_black))
lines(nsw$black,predict(pred_educ_black))
head(nsw)
pred_educ_hisp <- lm(education ~ hispanic, data = nsw)
plot(nsw$hispanic,nsw$education)
lines(nsw$hispanic,predict(pred_educ_black))
plot(nokids.income,probs.wnokids)
# Instructions
city.names <- c("Sag", "Sio", "Bat", "Mid",
"Ox", "Low", "Yak", "Rich")
observed.turnout = c(17, 30, 13, 55, 26, 29, 48, 43)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
foo <- data.frame(city.names, observed.turnout)
View(foo)
# Turnout Function
turnout <- function() {
# Four coin flips, establishing random assignment
assignment        <- foo[sample(1:2),]
assignment[3:4,]  <- foo[sample(3:4),]
assignment[5:6,]  <- foo[sample(5:6),]
assignment[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assignment[c(1,3,5,7),]
control.group     <- assignment[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
foo[sample(1:2),]
foo[sample(1:2),]
foo[sample(1:2),]
# Iterating the Turnout Function
iter.RI <- function(iterations = 10000) {
for (i in 1:iterations)
{storage.vector[i] <- turnout()
}
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
# Exploring the results
vvv <- quantile(results, prob = c(0.95))
# Exploring the results
vvv <- quantile(results, prob = c(0.95))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(foreign)
RCT_data <- read.dta("http://www.nber.org/~rdehejia/data/nsw.dta")
RCT_diffmeans <- 	mean(RCT_data$re78[RCT_data$treat == 1]) -
mean(RCT_data$re78[RCT_data$treat == 0])
print(RCT_diffmeans)
summary(lm(RCT_data$re78 ~ RCT_data$treat)) # note the coef on “treat”
confint(lm(RCT_data$re78 ~ RCT_data$treat)) # note the confint on “treat”
foo <- read.csv("/Users/juan/Downloads/dw_data.csv")
dim(foo)
library(Matching)
?Match
View(foo)
foo$u74 = foo$re74 > 0
View(foo)
foo$u74 = as.num(foo$re74 > 0)
foo$u74 = as.numeric(foo$re74 > 0)
View(foo)
foo$u75 = as.numeric(foo$re75 > 0)
glm1  <- glm(treat~age + I(age^2) + education + I(education^2) + black +
hispanic + married + nodegree + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, family=binomial, data=foo)
#
#save data objects
#
X  <- glm1$fitted
Y  <- lalonde$re78
Tr  <- lalonde$treat
#
#save data objects
#
X  <- glm1$fitted
Y  <- foo$re78
Tr  <- foo$treat
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
mb  <- MatchBalance(treat~age + I(age^2) + education + I(education^2) + black +
hispanic + married + nodegree + re74  + I(re74^2) + re75 + I(re75^2), data=foo, match.out=rr, nboots=10)
glm1  <- glm(treat~age + I(age^2) + education + I(education^2) + black +
hispanic + married + nodegree + re74  + I(re74^2) + re75 + I(re75^2), family=binomial, data=foo)
#
#save data objects
#
X  <- glm1$fitted
Y  <- foo$re78
Tr  <- foo$treat
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
mb  <- MatchBalance(treat~age + I(age^2) + education + I(education^2) + black +
hispanic + married + nodegree + re74  + I(re74^2) + re75 + I(re75^2), data=foo, match.out=rr, nboots=10)
setwd("~/Documents/GitHub/r-minerva")
setwd("~/Documents/GitHub/r-minerva")
nsw_controls <- read.table("nsw_control.txt")
nsw_treated <- read.table("nsw_treated.txt")
# STEP 4: Bind the treated and controls together, into one data frame
nsw_data <- rbind(nsw_treated, nsw_controls)
head(nsw_data)
additional_column_to_label_data_set <- rep(c("Original Lalonde Sample"), length(nsw_data[,1]))
nsw_data <- cbind(additional_column_to_label_data_set, nsw_data)
names(nsw_data) <-  c("data_id", "treat", "age", "educ", "black", "hisp",
"married", "nodegr", "re75", "re78")
head(nsw_data)
library(foreign)
DW_data <- read.dta("nsw_dw.dta")
head(DW_data)
# Step 2: read in cps_controls.dta and confirm it has the same structure
cps_controls <- read.dta("cps_controls.dta")
head(cps_controls)
# notice that the columns of cps_controls and nsw_data are different:
# nsw_data lacks the re74 column... we have to make the columns consistent b4 rbinding them
names(nsw_data)
names(cps_controls)
cps_controls_without_re74 <- cps_controls[,-9]
names(cps_controls_without_re74) <- names(nsw_data)
# Step 3: erase the RCT experiment's control group data from the Lalonde ("nsw_data") data set
nsw_data_nocontrols <- nsw_data[-which(nsw_data$treat == 0),]
# Step 4: rbind the nsw_data_nocontrols and the cps_controls together
nsw_treated_data_with_CPS <- rbind(nsw_data_nocontrols, cps_controls_without_re74)
# Make sure you have downloaded "cps_controls.dta" and make sure it's in R's working directory
# Read it in and check it out... (you probably did this already, above)
cps_controls <- read.dta("cps_controls.dta")
head(cps_controls)
# NEXT, make sure cps_controls has the same column names as Dehejia's experiment's data set
cps_controls_new_names <- cps_controls
names(cps_controls_new_names) <- names(DW_data)
# Step 3: erase the RCT experiment's control group data from Dehejia's ("nsw_data") data set
DW_data_nocontrols <- DW_data[-which(DW_data$treat == 0),]
# Step 4: rbind the nsw_data_nocontrols and the cps_controls together
DW_treated_data_with_CPS <- rbind(DW_data_nocontrols, cps_controls_new_names)
